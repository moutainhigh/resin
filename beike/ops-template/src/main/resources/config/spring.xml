<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<!-- 注解探测器 配置service层做事务代理，排除sprinMVC的Controller中相关的bean -->
    <context:component-scan base-package="com.meitianhui">
         <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
     </context:component-scan>
	
	<!-- 加载配置文件 -->
	<bean id="propertyConfigurer" class="com.meitianhui.common.util.PropertiesConfigUtil">
		<property name="locations">
			<list>
				<value>classpath:properties/*.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="mysql" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- 配置数据源 -->
	<bean id="mongodb" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>

	<bean id="dynamicDataSource" class="com.meitianhui.base.dataSource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="mysql" value-ref="mysql"></entry>
				<entry key="mongodb" value-ref="mongodb"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="mysql">
		</property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
		<property name="typeAliasesPackage" value="com.meitianhui.demo.entity" />
		<property name="mapperLocations"
			value="classpath*:com/meitianhui/*/dao/*/mapper/*.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.meitianhui.*.dao.*" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>

	<!-- 配置事务通知规则 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="BusinessException,SystemException" />
			<tx:method name="add*" propagation="REQUIRED"
				rollback-for="BusinessException,SystemException" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="BusinessException,SystemException" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="BusinessException,SystemException" />
			<tx:method name="del*" propagation="REQUIRED"
				rollback-for="BusinessException,SystemException" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="BusinessException,SystemException" />
			<tx:method name="handle*" propagation="REQUIRED"
				rollback-for="BusinessException,SystemException" />
		</tx:attributes>
	</tx:advice>

	<!-- 事物配置方式： 申明式配置事物 -->
	<!-- 定义AOP切面 切面为: com.meitianhui.*.service.* -->
	<aop:config proxy-target-class="false">
		<aop:advisor pointcut="execution(* com.meitianhui.*.service.*.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<aop:config>
		<aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor">
			<aop:pointcut id="mysql-dao"
				expression="execution(* com.meitianhui.demo.dao.mysql.*.*(..))" />
			<aop:pointcut id="mongodb-dao"
				expression="execution(* com.meitianhui.demo.dao.mongodb.*.*(..))" />
			<aop:before pointcut-ref="mysql-dao" method="setMysql" />
			<aop:before pointcut-ref="mongodb-dao" method="setMongodb" />
		</aop:aspect>
	</aop:config>

	<!-- 引入redis配置文件 -->
	<import resource="spring-redis.xml" />
</beans>